input {
  beats{
   port => 5044
 }
}


filter {

    if ([fields][logtype] == "conv") {
        mutate {
            remove_field => ["original", "event", "ip", "@version", "host"]
        }


        csv {
        skip_header => "true"
        separator => ","
        columns => ["EnforcerID","PeriodStartTime","PeriodEndTime","ClientIP","ServerIP","ServiceID","LineID","PipeID","VCID","InstanceType","InstanceKey1","InstanceKey2","NetUnitID","ClientDeviceID","ClientDevice.Class","ClientDevice.Vendor","ClientDevice.Model","ClientDeviceOS.Name","ClientDeviceOS.FullVersion","ClientDeviceOS.MajorVersion","TetheringIndication","NextHopAS","DestinationAS","MonitoredServiceGroupID","SessionRAT","IPv6Prefix","IPv6PrefixLength","CongestionState","InTunnelType","InTunnelInfo1","InTunnelInfo2","OutTunnelType","OutTunnelInfo1","OutTunnelInfo2","SubSessionKey","SubscriberID","SourceAS","LiveConnections","NewConnections","PacketsIn","PacketsOut","OctetsIn","OctetsOut","NetworkActivityTimeSec","RetransmittedTcpDataSegmentsIn","TotalTcpDataSegmentsIn","RetransmittedTcpDataSegmentsOut","TotalTcpDataSegmentsOut","RttEstimateExternalAvgMsec","RttEstimateExternalSumMsec","RttEstimateExternaEventsMsec","RttEstimateInternalAvgMsec","RttEstimateInternalSumMsec","RttEstimateInternaEventsMsec","MaxBandwidthKbps","MinBandwidthKbps","VoiPSessionDuration","QosDroppedPacketsIn","QosDroppedPacketsOut","QosDroppedOctetsIn","QosDroppedOctetsOut","UDPPacketsIn","UDPPacketsOut","UDPOctetsIn","UDPOctetsOut","InQoSLatencyAvgMsec","OutQoSLatencyAvgMsec","InNetworkActivityTimeSec","OutNetworkActivityTimeSec","SilentlyDroppedConnections","RejectedConnections","ClosedPassedConnections"]
        convert => {
          "ServerIP" => "integer"
          "InstanceType" => "integer"
          "InstanceKey1" => "integer"
          "InstanceKey2" => "integer"
          "NetUnitID" => "integer"
          "ClientDevice.Class" => "integer"
          "ClientDevice.Vendor" => "integer"
          "ClientDevice.Model" => "integer"
          "ClientDeviceOS.MajorVersion" => "integer"
          "NextHopAS" => "integer"
          "DestinationAS" => "integer"
          "SessionRAT" => "integer"
          "IPv6Prefix" => "integer"
          "IPv6PrefixLength" => "integer"
          "CongestionState" => "integer"
          "InTunnelInfo1" => "integer"
          "OutTunnelInfo1" => "integer"
          "SubSessionKey" => "integer"
          "SourceAS" => "integer"
          "LiveConnections" => "integer"
          "NewConnections" => "integer"  
          "PacketsIn" => "integer"         
          "PacketsOut" => "integer"         
          "OctetsIn" => "integer"         
          "OctetsOut" => "integer"         
          "NetworkActivityTimeSec" => "integer"         
          "RetransmittedTcpDataSegmentsIn" => "integer"         
          "TotalTcpDataSegmentsIn" => "integer"         
          "RetransmittedTcpDataSegmentsOut" => "integer"         
          "TotalTcpDataSegmentsOut" => "integer"         
          "RttEstimateExternalAvgMsec" => "integer"         
          "RttEstimateExternalSumMsec" => "integer"         
          "RttEstimateExternaEventsMsec" => "integer"         
          "RttEstimateInternalAvgMsec" => "integer"         
          "RttEstimateInternalSumMsec" => "integer"         
          "RttEstimateInternaEventsMsec" => "integer"         
          "MaxBandwidthKbps" => "integer"         
          "MinBandwidthKbps" => "integer"         
          "VoiPSessionDuration" => "integer"         
          "QosDroppedPacketsIn" => "integer"         
          "QosDroppedPacketsOut" => "integer"         
          "QosDroppedOctetsIn" => "integer"         
          "QosDroppedOctetsOut" => "integer"         
          "UDPPacketsIn" => "integer"         
          "UDPPacketsOut" => "integer"  
          "UDPOctetsIn" => "integer"         
          "UDPOctetsOut" => "integer"         
          "InQoSLatencyAvgMsec" => "integer"         
          "OutQoSLatencyAvgMsec" => "integer"         
          "InNetworkActivityTimeSec" => "integer"         
          "OutNetworkActivityTimeSec" => "integer"         
          "SilentlyDroppedConnections" => "integer"         
          "RejectedConnections" => "integer"         
          "ClosedPassedConnections" => "integer"         
        }
        }

        mutate {
        remove_field => ["message"]
        }
  
  }

    if ([fields][logtype] == "hdr") {
        mutate {
            remove_field => ["original", "event", "ip", "@version", "host"]
        }


        csv {
        skip_header => "true"
        separator => ","
        columns => ["EnforcerID","StartTime","SubscriberID","SessionKey","ClientIP","ClientPort","ServerIP","ServerPort","ServiceID","HTTPMethod","RequestHeader.Host","URI","DownloadContentLength","UploadContentLength","RequestActualByteCount","ResponseActualByteCount","ResponseCode","ServerInitialResponseTime","Duration","RequestHeader.DNT_x-do-not-track","RequestHeader.User-Agent","RequestHeader.Referer","ResponseHeader.Content-Type","L5Protocol","ClientDeviceID","ClientDevice.Class","ClientDevice.Vendor","ClientDevice.Model","ClientDeviceOS.Name","ClientDeviceOS.FullVersion","ClientDeviceOS.MajorVersion","LineID","PipeID","VCID","CDN","IMSI","IMEISV","Action","WebSafeFilterID"]
        convert => {
            "SessionKey" => "integer"
            "ServerPort" => "integer"
            "DownloadContentLength" => "integer"
            "UploadContentLength" => "integer"
            "RequestActualByteCount" => "integer"
            "ResponseActualByteCount" => "integer"
            "ServerInitialResponseTime" => "integer"
            "Duration" => "integer"
            "ClientDevice.Class" => "integer"
            "ClientDevice.Vendor" => "integer"
            "ClientDevice.Model" => "integer"
            "ClientDeviceOS.MajorVersion" => "integer"
            "WebSafeFilterID" => "integer"
                }
        }

        mutate {
        remove_field => ["message"]
        }
  
  }

  if ([fields][logtype] == "sdr") {
        mutate {
            remove_field => ["original", "event", "ip", "@version", "host"]
        }


        csv {
        skip_header => "true"
        separator => ","
        columns => ["EnforcerDBID","RecordCreationTimestamp","SubscriberID","SessionKey","SubSessionKey","SubSessionStartTime","SubSessionEndTime","ServicePlanID","OpenReason","CloseReason","SessionIMEI","SessionSGSN","SessionTAC","SessionRAT","SessionIPV4","SessionIPV6","SessionAPN","SessionLocation","SessionMCC","NetUnitID","Charging-Char","Acct-Session-ID","GGSN-Address","IMSI","SGSN-MCC-MNC","QoS-Profile","ChargingProfile","RatingGroup","NAT-IPV4","NAT-Port-Range-Start","NAT-Port-Range-End","CustomAttr1","CustomAttr2","CustomAttr3","CustomAttr4","CustomAttr5","CustomAttr6","CustomAttr7","CustomAttr8","CustomAttr9","CustomAttr10","SessionDomainId","S11SgwIP","S11SgwTEID"]

        convert => {
                "SubSessionKey" => "integer"
                "SessionTAC" => "integer"
                "SessionRAT" => "integer"
                "SessionIPV6" => "integer"
                "SessionMCC" => "integer"
                "NetUnitID" => "integer"
                "SGSN-MCC-MNC" => "integer"
                "RatingGroup" => "integer"
                "NAT-IPV4" => "integer"
                "NAT-Port-Range-Start" => "integer"
                "NAT-Port-Range-End" => "integer"
                "SessionDomainId" => "integer"
                "S11SgwIP" => "integer"
                "S11SgwTEID" => "integer"
                }
        }

        mutate {
        remove_field => ["message"]
        }
  
  }
}

output {

if ([fields][logtype] == "hdr") {
  elasticsearch {
   hosts => ["http://192.168.5.162:9200"]
   index => "hdr-%{+YYYY.MM.dd}"
   user  => "elastic"
   password => "password"
 }
 stdout{}
}

if ([fields][logtype] == "conv") {
  elasticsearch {
   hosts => ["http://192.168.5.162:9200"]
   index => "conv-%{+YYYY.MM.dd}"
   user  => "elastic"
   password => "password"
 }
 stdout{}
}

if ([fields][logtype] == "sdr") {
  elasticsearch {
   hosts => ["http://192.168.5.162:9200"]
   index => "sdr-%{+YYYY.MM.dd}"
   user  => "elastic"
   password => "password"
 }
 stdout{}
}
  
}